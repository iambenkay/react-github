{"version":3,"sources":["components/Repository.js","components/Repositories.js","serviceWorker.js","index.js"],"names":["Repository","react_default","a","createElement","className","this","props","name","href","url","target","full_name","pushed_at","language","React","Component","Repositories","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","repositories","loadRepos","bind","assertThisInitialized","json","setState","_this2","fetch","then","r","catch","e","Fragment","map","repo","Repository_Repository","key","id","Boolean","window","location","hostname","match","ReactDOM","render","Repositories_Repositories","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MAEqBA,mLAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4CAA4CC,KAAKC,MAAMC,MACrEN,EAAAC,EAAAC,cAAA,KAAGK,KAAMH,KAAKC,MAAMG,IAAKC,OAAO,SAAQT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,wBAAwBC,KAAKC,MAAMK,YACzFV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iDAAd,cAA0EC,KAAKC,MAAMM,WACrFX,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gCAAgCC,KAAKC,MAAMO,mBARvCC,IAAMC,WCCzBC,cACjB,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KACDiB,MAAQ,CACTC,aAAc,MAElBP,EAAKQ,UAAYR,EAAKQ,UAAUC,KAAfR,OAAAS,EAAA,EAAAT,CAAAD,IALFA,yEAOTW,GACNvB,KAAKwB,SAAS,CAAEL,aAAcI,gDAEd,IAAAE,EAAAzB,KAChB0B,MAAM,gDAAgDC,KAAK,SAAAC,GAAC,OAAIA,EAAEL,SAAQI,KAAK,SAAAC,GAAC,OAAIH,EAAKL,UAAUQ,KAAIC,MAAM,SAAAC,GAAC,OAAIA,qCAE7G,IACGX,EAAiBnB,KAAKkB,MAAtBC,aACR,OACIvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkC,SAAA,KACInC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BAAd,uBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVoB,EACKA,EAAaa,IAAI,SAAAC,GAAI,OACnBrC,EAAAC,EAAAC,cAACoC,EAAD,CACIC,IAAKF,EAAKG,GACVlC,KAAM+B,EAAK/B,KACXE,IAAK6B,EAAK7B,IACVE,UAAW2B,EAAK3B,UAChBC,UAAW0B,EAAK1B,UAChBC,SAAUyB,EAAKzB,aAGrB,YA/BgBC,IAAMC,WCS5B2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAAkBC,SAASC,eAAe,iBD2HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.351a1b66.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Repository extends React.Component {\n    render() {\n        return (\n            <div className=\"col-sm-6 col-lg-3 col-12 my-3 repo\">\n                <div className=\"card p-3 bg-white radius\">\n                    <h3 className=\"card-title cursive text-theme text-right\">{this.props.name}</h3>\n                    <a href={this.props.url} target=\"blank\"><h6 className=\"card-text text-right\">{this.props.full_name}</h6></a>\n                    <h6 className=\"card-text text-right last_push text-secondary\">Last push: {this.props.pushed_at}</h6>\n                    <span className=\"language radius cursive mt-1\">{this.props.language}</span>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Repository from './Repository';\n\nexport default class Repositories extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            repositories: null,\n        }\n        this.loadRepos = this.loadRepos.bind(this);\n    }\n    loadRepos(json) {\n        this.setState({ repositories: json })\n    }\n    componentDidMount() {\n        fetch(\"https://api.github.com/users/iambenkay/repos\").then(r => r.json()).then(r => this.loadRepos(r)).catch(e => e)\n    }\n    render() {\n        const { repositories } = this.state;\n        return (\n            <>\n                <h1 className=\"text-white mt-3 text-center\">Github Repositories</h1>\n                <div className=\"row repos\">\n                    {repositories\n                        ? repositories.map(repo => (\n                            <Repository\n                                key={repo.id}\n                                name={repo.name}\n                                url={repo.url}\n                                full_name={repo.full_name}\n                                pushed_at={repo.pushed_at}\n                                language={repo.language} />\n                        )\n                        )\n                        : \"\"}\n                </div>\n            </>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Repositories from './components/Repositories';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Repositories />, document.getElementById('repositories'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}